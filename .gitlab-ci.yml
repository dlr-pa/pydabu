variables:
  DEBIAN_FRONTEND: noninteractive
  APT_GET_INSTALL: "apt-get install --no-install-recommends -q -y"

stages:
  - pre
  - build_test
  - deploy

pre-commit_alpine:
  stage: pre
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  script:
    - date
    - apk add --no-cache bash git npm py3-pip
    - pip install pre-commit
    # run pre-commit
    - pre-commit --version
    - pre-commit run --all-files

pycodestyle_alpine:
  stage: pre
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  script:
    - date
    - apk add --no-cache py3-pycodestyle
    # check PEP 8 code style (pycodestyle was formerly called pep8)
    - pycodestyle --version
    - pycodestyle --show-source --show-pep8 --statistics $(find -name "*.py")

pylint_debian:
  stage: pre
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL libudunits2-0 pylint3 python3-jsonschema python3-netcdf4 python3-pip python3-pytest python3-pytest-cov python3-pytest-xdist python3-recommonmark
    # install dependencies (cfchecker via pip)
    - pip3 install cfchecker
    # run pylint
    - pylint --version
    - pylint --reports=n --disable=all --enable=similarities $(find -name "*.py") || echo "exit status:"$?
    - pylint $(find -name "*.py")
    - echo -e "\nskipped files:"
    - echo -e "$(grep -irl skip-file *)"

build_pages:
  stage: build_test
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    # get and install necessary packages:
    # python3-sphinx-argparse is buggy on debian:latest
    # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=983875;msg=9
    - $APT_GET_INSTALL latexmk libudunits2-0 make rsync python3-jsonschema python3-netcdf4 python3-pip python3-pytest python3-pytest-cov python3-pytest-xdist python3-recommonmark python3-setuptools python3-sphinx python3-wheel texlive-fonts-recommended texlive-latex-extra texlive-latex-recommended
    # install pydabu
    - pip3 install cfchecker sphinx-jsonschema sphinx-argparse
    - env python3 setup.py check_modules
    - pip3 install .
    # build
    - ./create_doc
    # create data for pages:
    - mv manual_pydabu_html public
    - mv manual_pydabu.pdf public/
    # create badges, which could be used in gitlab:
    # see https://github.com/jongracecox/anybadge for available colors
    - pip3 install anybadge
    - anybadge -l "document as" -v html -f pages.svg -c fuchsia -o
    - anybadge -l "document as" -v pdf -f document_pdf.svg -c orange -o
  # store data as artifacts (e. g. used by pages):
  artifacts:
    expire_in: 1 hrs
    paths:
      - document_pdf.svg
      - pages.svg
      - public

ubuntu-1804_test_doc:
  stage: build_test
  image:
    # https://hub.docker.com/_/ubuntu
    name: ubuntu:18.04
  script:
    - date
    - apt-get update
    # get and install necessary packages:
    - $APT_GET_INSTALL libudunits2-0 python3-jsonschema python3-netcdf4 python3-pip python3-setuptools python3-wheel
    # due to https://github.com/Unidata/cftime/issues/261 we need:
    - $APT_GET_INSTALL gcc python3-cryptography python3-dev python3-pip python3-setuptools python3-wheel
    - pip3 install 'cython>0.26.1' 'numpy>1.13.3'
    # install dependencies (cfchecker via pip)
    - pip3 install cfchecker
    # check all modules available
    - env python3 setup.py check_modules
    # install pydabu
    - pip3 install .
    # run pydabu
    - which pydabu
    - pydabu
    # run json_schema_from_schema_org
    - which json_schema_from_schema_org
    - json_schema_from_schema_org -h
    # unittest
    - env python3 setup.py run_unittest
    # install dependencies for pytest (ubuntu packages)
    - $APT_GET_INSTALL python3-pytest python3-pytest-cov python3-pytest-xdist
    # pytest
    - env python3 setup.py run_pytest --parallel --coverage
    # install dependencies for documentation (ubuntu packages)
    - $APT_GET_INSTALL latexmk make python3-recommonmark python3-sphinx python3-sphinx-argparse rsync texlive-fonts-recommended texlive-latex-extra texlive-latex-recommended
    # install dependencies for documentation (sphinx-jsonschema via pip)
    - pip3 install sphinx-jsonschema
    # build doc
    - ./create_doc

ubuntu-2004_test_doc:
  stage: build_test
  image:
    # https://hub.docker.com/_/ubuntu
    name: ubuntu:20.04
  script:
    - date
    - apt-get update
    # get and install necessary packages:
    - $APT_GET_INSTALL libudunits2-0 python3-jsonschema python3-netcdf4 python3-pip python3-setuptools python3-wheel
    # install dependencies (cfchecker via pip)
    - pip3 install cfchecker
    # check all modules available
    - env python3 setup.py check_modules
    # install pydabu
    - pip3 install .
    # run pydabu
    - which pydabu
    - pydabu
    # run json_schema_from_schema_org
    - which json_schema_from_schema_org
    - json_schema_from_schema_org -h
    # unittest
    - env python3 setup.py run_unittest
    # install dependencies for pytest (ubuntu packages)
    - $APT_GET_INSTALL python3-pytest python3-pytest-cov python3-pytest-xdist
    # pytest
    - env python3 setup.py run_pytest --parallel --coverage
    # install dependencies for documentation (ubuntu packages)
    - $APT_GET_INSTALL latexmk make python3-recommonmark python3-sphinx python3-sphinx-argparse rsync texlive-fonts-recommended texlive-latex-extra texlive-latex-recommended
    # install dependencies for documentation (sphinx-jsonschema via pip)
    - pip3 install sphinx-jsonschema
    # build doc
    - ./create_doc

pages:
  stage: deploy
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build_pages
  script:
    - date
  # store data as artifacts (e. g. used by pages):
  artifacts:
    paths:
      - document_pdf.svg
      - pages.svg
      - public

deploy_to_github:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  script:
    - date
    - apk add --no-cache git openssh
    - mkdir ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
    - mv $github_deploy_key ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519
    - repopath=$(mktemp -d)
    - git clone --mirror ${CI_REPOSITORY_URL} $repopath
    - (cd $repopath && git push --prune --mirror git@github.com:dlr-pa/pydabu.git)
